[{"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\ErrorHandler.ts":"1","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\logger.ts":"2","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\ErrorFallback.tsx":"3","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\appinsight.config.ts":"4","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\index.tsx":"5","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\components\\MyDashboard.tsx":"6","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\App.tsx":"7"},{"size":417,"mtime":1611065224565,"results":"8","hashOfConfig":"9"},{"size":1402,"mtime":1611065678203,"results":"10","hashOfConfig":"9"},{"size":448,"mtime":1611065308559,"results":"11","hashOfConfig":"9"},{"size":858,"mtime":1611063581044,"results":"12","hashOfConfig":"9"},{"size":542,"mtime":1610973806912,"results":"13","hashOfConfig":"9"},{"size":1020,"mtime":1611065125961,"results":"14","hashOfConfig":"9"},{"size":549,"mtime":1611040570643,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1us9qs3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\ErrorHandler.ts",["32","33"],"import logger from './logger';\r\n\r\ntype ErrorHandler = (error: Error, info: { componentStack: string }) => void;\r\n\r\n// Handler function to handle error caught by Error-Boundary. Here , we can send errors to logging service\r\n\r\nconst myErrorHandler: ErrorHandler = (error, info) => {\r\n  console.log('gotcha');\r\n  console.log(error, info.componentStack);\r\n  logger.logError(error);\r\n};\r\n\r\nexport default myErrorHandler;\r\n","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\logger.ts",["34","35"],"import { useTrackMetric } from '@microsoft/applicationinsights-react-js';\r\nimport { SeverityLevel } from '@microsoft/applicationinsights-web';\r\nimport { appInsights, reactPlugin } from './appinsight.config';\r\n\r\n// Centralized log handler. Can plug any third party remote logging service here.\r\n\r\nconst logger = (() => {\r\n  // use to log warnings\r\n  const logWarning = (message: string) => {\r\n    appInsights.trackTrace({\r\n      severityLevel: SeverityLevel.Warning,\r\n      message,\r\n    });\r\n  };\r\n  // use to log information\r\n  const logInfo = (message: string, properties: { [key: string]: any }) => {\r\n    appInsights.trackTrace({\r\n      severityLevel: SeverityLevel.Information,\r\n      message,\r\n      properties,\r\n    });\r\n  };\r\n  // use to log errors\r\n  const logError = (error: Error) => {\r\n    appInsights.trackException({\r\n      severityLevel: SeverityLevel.Error,\r\n      exception: error,\r\n    });\r\n  };\r\n  // use to log application interaction/events\r\n  const logAppEvent = (name: string, properties?: { [key: string]: any }) => {\r\n    appInsights.trackEvent({\r\n      name,\r\n      properties,\r\n    });\r\n  };\r\n  // use to log custom app metrics\r\n  const logAppMetric = (name: string) => {\r\n    const trackComponent = useTrackMetric(reactPlugin, name);\r\n    return trackComponent;\r\n  };\r\n  return { logWarning, logInfo, logError, logAppEvent, logAppMetric };\r\n})();\r\n\r\nexport default logger;\r\n","G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\ErrorFallback.tsx",[],"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\logger\\appinsight.config.ts",[],"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\index.tsx",[],"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\components\\MyDashboard.tsx",[],"G:\\Project\\projects\\web_app\\optym\\optym-poc\\src\\App.tsx",[],{"ruleId":"36","severity":1,"message":"37","line":8,"column":3,"nodeType":"38","messageId":"39","endLine":8,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":9,"column":3,"nodeType":"38","messageId":"39","endLine":9,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":16,"column":66,"nodeType":"42","messageId":"43","endLine":16,"endColumn":69,"suggestions":"44"},{"ruleId":"40","severity":1,"message":"41","line":31,"column":68,"nodeType":"42","messageId":"43","endLine":31,"endColumn":71,"suggestions":"45"},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["46","47"],["48","49"],{"messageId":"50","fix":"51","desc":"52"},{"messageId":"53","fix":"54","desc":"55"},{"messageId":"50","fix":"56","desc":"52"},{"messageId":"53","fix":"57","desc":"55"},"suggestUnknown",{"range":"58","text":"59"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"58","text":"60"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"61","text":"59"},{"range":"61","text":"60"},[592,595],"unknown","never",[1030,1033]]